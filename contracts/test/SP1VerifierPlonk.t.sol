// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

import {Test, console} from "forge-std/Test.sol";
import {SP1Verifier} from "../src/v3.0.0-rc3/SP1VerifierPlonk.sol";

contract SP1VerifierPlonkTest is Test {
    bytes32 internal constant PROGRAM_VKEY =
        bytes32(0x0031d9b929d13038eb7c25790617a5ff09d3e3f6d20fc3f0bb70ada6c20206cd);
    bytes internal constant PUBLIC_VALUES =
        hex"00000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000001a6d0000000000000000000000000000000000000000000000000000000000002ac2";
    bytes internal constant PROOF_VALID =
        hex"8fd4de721d6b0469a8040ae7157416844a099d215a218823b5eb39f5954beb654bb8a59f121e84cb80615c90a1ca83cbe6f4df4feae814933e9b8283e1ddbf4e9ef8673221c137d5464f5dd1375ed251fb67ec4d3aae7e7ac818fe7a2682fe7cab14dfb52175f23f1126869f63a2d78811783495fc6c3fc6cef4b4bb140883333fde86870c79a31a6dccfda11845a88deb8aea1b2739e24687a1b19550a1c6fad9fa438f118783416eb7cccc2b787b47039a0ae8fbb76ef0f84ac4bdf43c765d6f0f9d280b8db03225f82e8b6e2aee618d147f2547886c0f8f93e1f3bd844d7c549efe1c013420234a546cdaced9ae4c1be703b97f4250224e194152e13a7edd98984f5c008458712126d0fbedadbf6cf4cfc7c8be3f34a4bc4113ba8a1350f5134f315b065168bd7fa00715524c8c2a8912b54a1f37020d6f2b22e5a97153ee110540ef17909099a8c5fb056c7f8af19e6592d7ce841e1e4942fddb284c7a38aea4b2be1c6ce791a36c321b5185933ba44e42dfe9ddc4744b237f7090979261e39e4ce223d3b29ca347f5b765f6a7167901ee1819ff062b7a8e8c1af30cefb4950828491b0e4a3630525b4a02f129fd15fdc7c5c24f4b72668804b11bb7d4a9afe61c7f007ab65f996918dec04120c08dfb2a0cec01ef011c4f798c1432a88f9127a1700565edf0b4414852a52c61cd7dcb343416614bbbfe4f17437f68cc745432b70a25222217caf9aa90ff1fb961e30a3ce9279bcb8422dd2d2b371e461c7faaff78255e22f51ecb25a8695d9ddecbfbc0f42bbb85d515968a61f75fa68fb3ab28dd01943c624f59599167f96202ebb1d464f822b30639ac54baeeab57cf11364b6912e6ca69362c80e34ea68ff150ed0f70c881b0be58cba471ae4f1b21f2d688bd1fd245467fecd7807ce407a014b7a6ccac8460508773c447efc072db28fa2b0b217485075491257e42c4b5bb3544f6eae2686e0861032e9b9573b0266516f59e0e016fa249be783d736f912276f9918ac93a75ffba0a8b2f26921cdd0a6599a10d06f79ceca9bbd7636ed3a25f2055b4ae864b17f0d19d0aee604aac155f6b390fb70e573a97c08b4b149e3c235573fa9ecb7746d5c907f89d7e771fb560d02c0e8da26a5de94bc501051cb976085e693080afd6bb35752f171dbb662d1ec6df1fcc582d047dc5d9cfe1f5ea36d0e0d8befd4f9f13ec70aeb01c026c94deae2e";
    bytes internal constant PROOF_INVALID = hex"616a42052115dd50acf8e57f10c32ca72a6940";

    address internal verifier;

    function setUp() public virtual {
        verifier = address(new SP1Verifier());
    }

    /// @notice Should succeed when the proof is valid.
    function test_VerifyProof_WhenPlonk() public view {
        SP1Verifier(verifier).verifyProof(PROGRAM_VKEY, PUBLIC_VALUES, PROOF_VALID);
    }

    /// @notice Should revert when the proof is invalid.
    function test_RevertVerifyProof_WhenPlonk() public view {
        SP1Verifier(verifier).verifyProof(PROGRAM_VKEY, PUBLIC_VALUES, PROOF_VALID);
    }
}
