// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

import {Test, console} from "forge-std/Test.sol";
import {SP1Verifier} from "../src/v3.0.0-rc4/SP1VerifierPlonk.sol";

contract SP1VerifierPlonkTest is Test {
    bytes32 internal constant PROGRAM_VKEY =
        bytes32(0x00467584e2e560847e9e96b5102c082f5e07155429c6622988799df9d95dbb47);
    bytes internal constant PUBLIC_VALUES =
        hex"00000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000001a6d0000000000000000000000000000000000000000000000000000000000002ac2";
    bytes internal constant PROOF_VALID =
        hex"865350661628ddb69371fc7c9073a376b38903c7617210213158b4e2e45e205b512fb7f3036e95aa96a81d41d603aa7c43a2a3d7e2ba0d80367bc341a2b742f39aa7b3820fbd2c41e1ccb638d37e31244eedbc3a0ae327e66be2e85e88c2db616e8d6cab18fb0f0ea87b13ba77d4f74373f262e59f2fc1a3b6efdcd566e27d07d227cbfd0e641247b8549ba90fa21dcc3254b201b0581b5f10d0c91f3116d87552d5c035091810ea278254675eab7407f42df022a911099c88339ddbfccf26dd0e73721508f4ae8abf4ce2d487a796df1d1fa3845670fa73d47de7710303ea099a1f5eab132473c2666c1038188d76696c35d6a5123da47d6b3661a7675f27d574012abe17846cebb7b514d78941669bcbca4821e0b4386f7317dd1c1a059de9f24193a72b2ccc27d09485c268a7117e6e072852dc74dca498fcdcfbf7dd76966acbc3ac28ae942309476b7294d02e4ad5b8d7fa98665ca670825478bc9bd047629649781cd9a5057b25bff2f708d191e1dd2fd1206f76731e814cacf7e04683241b36dd2fef9020ac6dcb3c4953633a578923ddd907c35b4350c4a4d155fcc44558324407ec1d93937db2d6a45f55bcb0b3f2f7f1d5c6c7095d88e6b80618cadb76df6a0a6e102e8d260bfaf1ef97fadb440f1d9f4acc4e5db459c5ca3f80e32166c460041fe238cb33e8c688cda38f6efb7962ebc1851bb4ca2ed3b8abc6decae571371baf2ee68dd2812312932a1c14c1eab9b03192298d0c20101c5b7517ff92f4312bdcaca5c50b27d727f1822341c7ff2c31bc4d1b388c8939b1226f4bbf2631ba2da814157d71721d11922b356d2d0e6b321e4138950ec71886f246c52cc527eb10a95f975b85b898892838cfddba3be9109c8cbcf52b85affd937fdd5c8d5c8b294860e9f1275a44c45c857a16e337a5db20962b2a197bb610e4495039c4af621b00e0f0c842cbc5c9e9c859edf1093e9427d51d5cb970ece9a45bad0c0a3452089d62e252ebfd5d56aaa8a609d536db4ae79e51b901291d41925e4d93c0285728498bc4fe78a8b1720cf0bfa406a7c668155e1d0cec04a4972a71681ce3861330138f66ea1e7c878ee8b3a0b85c7fdca54da9d2206c10d1bc9340ce309242ea009e7daa6aa0d6556b15867240fa29997b938fd7d8be734963b0e431bbbcce8e0330e9232320df87f3d760184f7b68d540ea06a3db5b06365ddda1621523bef5";
    bytes internal constant PROOF_INVALID = hex"616a42052115dd50acf8e57f10c32ca72a6940";

    address internal verifier;

    function setUp() public virtual {
        verifier = address(new SP1Verifier());
    }

    /// @notice Should succeed when the proof is valid.
    function test_VerifyProof_WhenPlonk() public view {
        SP1Verifier(verifier).verifyProof(PROGRAM_VKEY, PUBLIC_VALUES, PROOF_VALID);
    }

    /// @notice Should revert when the proof is invalid.
    function test_RevertVerifyProof_WhenPlonk() public view {
        SP1Verifier(verifier).verifyProof(PROGRAM_VKEY, PUBLIC_VALUES, PROOF_VALID);
    }
}
