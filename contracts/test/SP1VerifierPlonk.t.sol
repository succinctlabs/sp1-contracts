// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

import {Test, console} from "forge-std/Test.sol";
import {SP1Verifier} from "../src/v3.0.0-rc1/SP1VerifierPlonk.sol";

contract SP1VerifierPlonkTest is Test {
    bytes32 internal constant PROGRAM_VKEY =
        bytes32(0x00db1ca9cf1872ef132764a5aef4069a050266d812fbd95dce4fa860e2279857);
    bytes internal constant PUBLIC_VALUES =
        hex"00000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000001a6d0000000000000000000000000000000000000000000000000000000000002ac2";
    bytes internal constant PROOF_VALID =
        hex"ffea2d2e0c7f6c4a0feccc7692e18d99dc16b071cd62c017a2d0bb18f73fa60e612b7ffe0528ffdf93b7b3e0057302f53c4cb875471c672b2c02d101e39e6c5e291540812c46dd4e558decb38a1480b497cbc826b435dd5f327972b0a8a45a694d787713212bcff516f1a679f328286659550a0466cc63c84a49581121201d7c98d749952008b8c0a2c83a4028e32418d8548fddc4481feb13b0a2396073fa1e56faec992cb8924777c823a581f33c092795be803e6a004a8ae16b9b7edf4d5b6047c89829face1d013326ae91b944adbac6f8195d320f82204af199f98274dff5b1f0d40ac090e5b80ec3a78c9544cf69e46b6efc4cd6361b2757f47a6fd2519ff49d8e1827d226f7159837f7449b6d1c062d2848847e3879a338fba9336307b44bc2031dc0ee955b64b7120f3e602aacd23d0ffc524c5c6d9ee540ffc5012eb57ea7b40689cdc0dbbda03cc7e4e0d639cb6e4fa874659cb0e8051336f5ae4c3702d7fa245928dc646ac701afb9a1f540e8b51bd279e401b99b91a5e5f96c13f7471a2c1eae88ca333acf41959b37e277d277580d50c709d8f84c72ddb81d85ff73f4e30c054203abfe489646ccffa50d18e7d9f5d78fac07ef313b8fc49f9a6505536122195b5485f9f5bc8a59740ec969b6081e50589767dbe270372b8d0eb2ecca5d05c2e25f27a2b0ce86c5b485de46235fadf58f0b3a0b8cddee95f81d4f178d9620153bcd8eec1da3aac7173ff70bb65a756b266ccbd1f981fcc4ed53e60616630ce5337e3c834ad44149ad668c9cb4fab88649af2be713431ea104d50ff35baf195fc1aa0b9732abfc0e9a22166aaa91e02a89d5add6f587cc7478554c8f4f790de472dd2d043f1b367632532b3ef8e01439ea589edc005e22ada1cc5956308b22e06674ff6af1078e16a6f67b72ca104fb183b5c8b1679123376c0399200fca2a32d8519461d465254560ad74e88aac20e2e8d465e8281115146beda6014128222f76b1558ddef907e98866417f70052b5a49767e41f9467c8a5ffb989a2dbe092723320566d586837f62971a2c410e383a83ac59a6fbbd03d9a7f3286fe21e0c02efbe6d33542e4daaa4f1b51068838dac6a816c0551679c9df3b09b40018512241d56c8eebe806a3de293ffbfb72ad00df6a915328f291d54f739f58553e41dcd0e60f9a7bdfc800f989475f5845efef1c5b3624d195c7dae681659c6d51d";
    bytes internal constant PROOF_INVALID = hex"616a42052115dd50acf8e57f10c32ca72a6940";

    address internal verifier;

    function setUp() public virtual {
        verifier = address(new SP1Verifier());
    }

    /// @notice Should succeed when the proof is valid.
    function test_VerifyProof_WhenPlonk() public view {
        SP1Verifier(verifier).verifyProof(PROGRAM_VKEY, PUBLIC_VALUES, PROOF_VALID);
    }

    /// @notice Should revert when the proof is invalid.
    function test_RevertVerifyProof_WhenPlonk() public view {
        SP1Verifier(verifier).verifyProof(PROGRAM_VKEY, PUBLIC_VALUES, PROOF_VALID);
    }
}
